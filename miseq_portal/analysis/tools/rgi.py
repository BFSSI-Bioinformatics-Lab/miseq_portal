import logging
from pathlib import Path
from typing import Optional

import pandas as pd

from django.conf import settings
from miseq_portal.analysis.models import AnalysisGroup
from miseq_portal.analysis.tools.helpers import run_subprocess

logger = logging.getLogger('django')

RGI = settings.RGI_EXE


# TODO: Had to manually modify the !# line in /home/brock/Desktop/BioInfo/rgi-5.1.0/rgi to call the correct interpreter
#   seems like a bad solution

def call_rgi_main(fasta: Path, outdir: Path, sample_id: str) -> Optional[tuple]:
    """
    RGI takes an output path with a basename, then creates output files in that directory with that basename
    The --clean parameter removes all temporary output files, leaving only the .json and .txt results
    :param fasta:
    :param outdir:
    :param sample_id:
    :return:
    """
    outpath = outdir / (sample_id + "_RGI_Results")
    cmd = f'{RGI} main -i {fasta} -o {outpath} --clean'
    outlog = run_subprocess(cmd, get_stdout=True)
    logger.info(cmd)
    logger.info(outlog)
    rgi_text_results = outpath.with_suffix(".txt")
    rgi_json_results = outpath.with_suffix(".json")
    try:
        assert rgi_text_results.exists()
        assert rgi_json_results.exists()
    except AssertionError:
        logger.warning(f"Could not find expected RGI result files for {sample_id}")
        return None
    return rgi_text_results, rgi_json_results


def call_rgi_parser(rgi_json: Path, outdir: Path, sample_id: str):
    """
    The RGI parser program generates categorical JSON files for the RGI wheel visualizer
    These files can be uploaded to the CARD website for visualization
    Maybe I'll visualize this myself?
    """
    # TODO: Finish implementing this
    outpath = outdir / (sample_id + "RGI_Parsed")
    cmd = f'{RGI} parser -i {rgi_json} -o {outpath} -t contig'
    outlog = run_subprocess(cmd, get_stdout=True)
    logger.info(cmd)
    logger.info(outlog)


def call_rgi_heatmap(rgi_json_dir: Path, outdir: Path, analysis_group: AnalysisGroup,
                     category: str = 'drug_class', cluster: str = 'samples', display='text'):
    """
    Calls the RGI heatmap program. This takes an input directory containing all RGI .json results to compare.
    Has three adjustable parameters:
        1) --category {drug_class, resistance_mechanism, gene_family}
        2) --cluster {samples, genes, both}
        3) --display {plain, fill, text}
    """
    logger.info(f"Running RGI heatmap on {analysis_group}")
    outpath = outdir / (analysis_group.created.strftime('%Y%m%d') + '_heatmap')
    cmd = f'{RGI} heatmap -i {rgi_json_dir} --category {category} ' \
          f'--cluster {cluster} --display {display} --output {outpath}'
    outlog = run_subprocess(cmd, get_stdout=True)
    logger.info(cmd)
    logger.info(outlog)

    try:
        eps_out = list(outdir.glob(analysis_group.created.strftime('%Y%m%d') + '_heatmap*.eps'))[0]
        png_out = list(outdir.glob(analysis_group.created.strftime('%Y%m%d') + '_heatmap*.png'))[0]
    except IndexError:
        logger.warning(f"RGI did not generate the expected output files for {analysis_group}")
        return None
    try:
        assert eps_out.exists()
        assert png_out.exists()
    except AssertionError:
        logger.warning(f"Could not find expected RGI output files for {analysis_group}")
        return None
    return png_out


def parse_rgi_output(rgi_text_results: Path):
    """
    Given the .txt result file generated by rgi main, parses into a Pandas DataFrame
    :param rgi_text_results:
    :return:
    """
    df = pd.read_csv(rgi_text_results, sep="\t")
