from pathlib import Path


def verify_miseq_folder_contents(miseq_folder: Path) -> bool:
    """
    Function to perform minimal check of input MiSeqAnalysis folder to ensure it follows the expected structure
    :param miseq_folder: Path to MiSeqAnalysis folder
    :return: True if folder meets expected structure, False if not
    """
    check_dict = dict()
    check_dict['samplesheet'] = False
    check_dict['interop'] = False
    check_dict['data'] = False
    check_dict['basecalls'] = False
    check_dict['logs'] = False

    for f in miseq_folder.glob("*"):
        if f.name == "SampleSheet.csv":
            check_dict['samplesheet'] = True
            print("PASS: Detected 'SampleSheet.csv'")
        elif f.name == "InterOp" and f.is_dir():
            check_dict['interop'] = True
            print("PASS: Detected 'InterOp' directory")
        elif f.name == "Data" and f.is_dir():
            check_dict['data'] = True
            print("PASS: Detected 'Data' directory")
        elif f.name == "Logs" and f.is_dir():
            check_dict['logs'] = True
            print("PASS: Detected 'Logs' directory")
        else:
            pass

    # Check for fastq files in expected location
    if len(list(miseq_folder.glob("Data/Intensities/BaseCalls/*.f*q*"))) > 0:
        check_dict['basecalls'] = True
        print("PASS: Detected a non-zero number of *.fastq.gz files in ./Data/Intensities/BaseCalls/*")
    else:
        print("FAIL: Could not detect any *.fastq.gz files in ./Data/Intensities/BaseCalls/*")

    if False in check_dict.values():
        raise Exception(f"Input folder {miseq_folder} is not structured as expected.\n"
                        f"{check_dict}")
    else:
        print(f"Input folder {miseq_folder} passed all basic checks\n")
        return True


def retrieve_fastqgz(directory: Path) -> [Path]:
    """
    :param directory: Path to folder containing output from MiSeq run
    :return: LIST of all .fastq.gz files in directory
    """
    fastq_file_list = list(directory.glob("*.f*q*"))
    return fastq_file_list


def filter_undetermined_reads(fastq_file_list: list) -> list:
    filtered_list = [x for x in fastq_file_list if 'Undetermined_' not in x.name]
    return filtered_list


def retrieve_sampleids(fastq_file_list: [Path]) -> list:
    """
    :param fastq_file_list: List of fastq.gz filepaths generated by retrieve_fastqgz()
    :return: List of Sample IDs
    """
    # Iterate through all of the fastq files and grab the sampleID, append to list
    sample_id_list = list()
    for f in fastq_file_list:
        sample_id = f.name.split('_')[0]
        sample_id_list.append(sample_id)

    # Get unique sample IDs
    sample_id_list = list(set(sample_id_list))
    return sample_id_list


def get_readpair(sample_id: str, fastq_file_list: [Path], forward_id: str = "_R1",
                 reverse_id: str = "_R2") -> (list, None):
    """
    :param sample_id: String of sample ID
    :param fastq_file_list: List of fastq.gz file paths generated by retrieve_fastqgz()
    :param forward_id: ID indicating forward read in filename (e.g. _R1)
    :param reverse_id: ID indicating reverse read in filename (e.g. _R2)
    :return: the absolute filepaths of R1 and R2 for a given sample ID
    """

    r1, r2 = None, None
    for f in fastq_file_list:
        if sample_id in f.name:
            if forward_id in f.name:
                r1 = f
            elif reverse_id in f.name:
                r2 = f
    if r1 is not None and r2 is not None:
        return [r1, r2]
    else:
        print('Could not pair {}'.format(sample_id))
        return None


def populate_sample_dictionary(sample_id_list: list, fastq_file_list: [Path]) -> dict:
    """
    :param sample_id_list: List of unique Sample IDs generated by retrieve_sampleids()
    :param fastq_file_list: List of fastq.gz file paths generated by retrieve_fastqgz()
    :param forward_id: ID indicating forward read in filename (e.g. _R1)
    :param reverse_id: ID indicating reverse read in filename (e.g. _R2)
    :return: dictionary with each Sample ID as a key and the read pairs as values
    """
    # Find file pairs for each unique sample ID
    sample_dictionary = {}
    for sample_id in sample_id_list:
        read_pair = get_readpair(sample_id, fastq_file_list)
        if read_pair is not None:
            sample_dictionary[sample_id] = read_pair
        else:
            pass
    return sample_dictionary


def get_sample_dictionary(directory: Path) -> dict:
    """
    Creates a sample dictionary with unique/valid sample IDs as keys and paths to forward and reverse reads as values
    :param directory: Path to a directory containing .fastq.gz files
    :param forward_id: ID indicating forward read in filename (e.g. _R1)
    :param reverse_id: ID indicating reverse read in filename (e.g. _R2)
    :return: Validated sample dictionary with sample_ID:R1,R2 structure
    """
    fastq_file_list = retrieve_fastqgz(directory)
    fastq_file_list = filter_undetermined_reads(fastq_file_list)
    sample_id_list = retrieve_sampleids(fastq_file_list)
    sample_dictionary = populate_sample_dictionary(sample_id_list, fastq_file_list)
    print(f"Successfully paired {len(sample_dictionary)} of {len(sample_id_list)} samples:")
    return sample_dictionary


def parse_miseq_folder(miseq_folder: Path) -> dict:
    # Folder setup
    read_folder = None
    interop_folder = None

    # Make sure folder is ok
    if verify_miseq_folder_contents(miseq_folder):
        read_folder = miseq_folder / "Data" / "Intensities" / "BaseCalls"
        interop_folder = miseq_folder / "InterOp"

    # Get sample dict
    sample_dict = get_sample_dictionary(read_folder)

    for sample, reads in sorted(sample_dict.items()):
        print(f"{sample} ({reads[0].name}, {reads[1].name})")

    samplesheet = Path(list(miseq_folder.glob('SampleSheet.csv'))[0])

    # Get log files
    log_folder = miseq_folder / "Logs"
    log_files = list(log_folder.glob("*"))

    try:
        json_stats_file = Path(list(log_folder.glob("Stats.json"))[0])
    except IndexError:
        print("WARNING: Could not locate ./Logs/Stats.json file.")
        json_stats_file = None

    # Create dict for all MiSeq data
    miseq_dict = dict()
    miseq_dict['samplesheet_path'] = samplesheet
    miseq_dict['interop_folder'] = interop_folder
    miseq_dict['sample_dict'] = sample_dict
    miseq_dict['log_files'] = log_files
    miseq_dict['json_stats_file'] = json_stats_file

    return miseq_dict
